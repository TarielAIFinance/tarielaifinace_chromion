{
	"compiler": {
		"version": "0.8.24+commit.e11b9ed9"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_router",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_usdcToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_staker",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "CallToStakerFailed",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "router",
						"type": "address"
					}
				],
				"name": "InvalidRouter",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidSenderAddress",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidSourceChain",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidStaker",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidUsdcToken",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "messageId",
						"type": "bytes32"
					}
				],
				"name": "MessageNotFailed",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NoReturnDataExpected",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "sourceChainSelector",
						"type": "uint64"
					}
				],
				"name": "NoSenderOnSourceChain",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "OnlySelf",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "usdcToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "receivedToken",
						"type": "address"
					}
				],
				"name": "WrongReceivedToken",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "sourceChainSelector",
						"type": "uint64"
					}
				],
				"name": "WrongSenderForSourceChain",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "messageId",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "reason",
						"type": "bytes"
					}
				],
				"name": "MessageFailed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "messageId",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "uint64",
						"name": "sourceChainSelector",
						"type": "uint64"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "tokenAmount",
						"type": "uint256"
					}
				],
				"name": "MessageReceived",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "messageId",
						"type": "bytes32"
					}
				],
				"name": "MessageRecovered",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "OwnershipTransferRequested",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "acceptOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "bytes32",
								"name": "messageId",
								"type": "bytes32"
							},
							{
								"internalType": "uint64",
								"name": "sourceChainSelector",
								"type": "uint64"
							},
							{
								"internalType": "bytes",
								"name": "sender",
								"type": "bytes"
							},
							{
								"internalType": "bytes",
								"name": "data",
								"type": "bytes"
							},
							{
								"components": [
									{
										"internalType": "address",
										"name": "token",
										"type": "address"
									},
									{
										"internalType": "uint256",
										"name": "amount",
										"type": "uint256"
									}
								],
								"internalType": "struct Client.EVMTokenAmount[]",
								"name": "destTokenAmounts",
								"type": "tuple[]"
							}
						],
						"internalType": "struct Client.Any2EVMMessage",
						"name": "any2EvmMessage",
						"type": "tuple"
					}
				],
				"name": "ccipReceive",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "_sourceChainSelector",
						"type": "uint64"
					}
				],
				"name": "deleteSenderForSourceChain",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "offset",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "limit",
						"type": "uint256"
					}
				],
				"name": "getFailedMessages",
				"outputs": [
					{
						"components": [
							{
								"internalType": "bytes32",
								"name": "messageId",
								"type": "bytes32"
							},
							{
								"internalType": "enum CCIPreceiverBASE.ErrorCode",
								"name": "errorCode",
								"type": "uint8"
							}
						],
						"internalType": "struct CCIPreceiverBASE.FailedMessage[]",
						"name": "",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getRouter",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "bytes32",
								"name": "messageId",
								"type": "bytes32"
							},
							{
								"internalType": "uint64",
								"name": "sourceChainSelector",
								"type": "uint64"
							},
							{
								"internalType": "bytes",
								"name": "sender",
								"type": "bytes"
							},
							{
								"internalType": "bytes",
								"name": "data",
								"type": "bytes"
							},
							{
								"components": [
									{
										"internalType": "address",
										"name": "token",
										"type": "address"
									},
									{
										"internalType": "uint256",
										"name": "amount",
										"type": "uint256"
									}
								],
								"internalType": "struct Client.EVMTokenAmount[]",
								"name": "destTokenAmounts",
								"type": "tuple[]"
							}
						],
						"internalType": "struct Client.Any2EVMMessage",
						"name": "any2EvmMessage",
						"type": "tuple"
					}
				],
				"name": "processMessage",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "messageId",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "beneficiary",
						"type": "address"
					}
				],
				"name": "retryFailedMessage",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"name": "s_messageContents",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "messageId",
						"type": "bytes32"
					},
					{
						"internalType": "uint64",
						"name": "sourceChainSelector",
						"type": "uint64"
					},
					{
						"internalType": "bytes",
						"name": "sender",
						"type": "bytes"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "",
						"type": "uint64"
					}
				],
				"name": "s_senders",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "_sourceChainSelector",
						"type": "uint64"
					},
					{
						"internalType": "address",
						"name": "_sender",
						"type": "address"
					}
				],
				"name": "setSenderForSourceChain",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))": {
					"details": "Extremely important to ensure only router calls this.",
					"params": {
						"any2EvmMessage": "The message to process."
					}
				},
				"constructor": {
					"params": {
						"_router": "The address of the router contract.",
						"_staker": "The address of the staker contract.",
						"_usdcToken": "The address of the usdc contract."
					}
				},
				"deleteSenderForSourceChain(uint64)": {
					"details": "Delete the sender contract for a given source chain.",
					"params": {
						"_sourceChainSelector": "The selector of the source chain."
					}
				},
				"getFailedMessages(uint256,uint256)": {
					"details": "This function returns a subset of failed messages defined by `offset` and `limit` parameters. It ensures that the pagination parameters are within the bounds of the available data set.",
					"params": {
						"limit": "The maximum number of failed messages to return, restricting the size of the returned array.",
						"offset": "The index of the first failed message to return, enabling pagination by skipping a specified number of messages from the start of the dataset."
					},
					"returns": {
						"_0": "failedMessages An array of `FailedMessage` struct, each containing a `messageId` and an `errorCode` (RESOLVED or FAILED), representing the requested subset of failed messages. The length of the returned array is determined by the `limit` and the total number of failed messages."
					}
				},
				"getRouter()": {
					"returns": {
						"_0": "CCIP router address"
					}
				},
				"processMessage((bytes32,uint64,bytes,bytes,(address,uint256)[]))": {
					"details": "Transfers specified token amounts to the owner of this contract. This function must be external because of the  try/catch for error handling. It uses the `onlySelf`: can only be called from the contract.",
					"params": {
						"any2EvmMessage": "Received CCIP message."
					}
				},
				"retryFailedMessage(bytes32,address)": {
					"details": "This function is only callable by the contract owner. It changes the status of the message from 'failed' to 'resolved' to prevent reentry and multiple retries of the same message.",
					"params": {
						"beneficiary": "The address to which the tokens will be sent.",
						"messageId": "The unique identifier of the failed message."
					}
				},
				"setSenderForSourceChain(uint64,address)": {
					"details": "Set the sender contract for a given source chain.",
					"params": {
						"_sender": "The sender contract on the source chain .",
						"_sourceChainSelector": "The selector of the source chain."
					}
				},
				"supportsInterface(bytes4)": {
					"details": "Should indicate whether the contract implements IAny2EVMMessageReceiver. e.g. return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId This allows CCIP to check if ccipReceive is available before calling it. - If this returns false or reverts, only tokens are transferred to the receiver. - If this returns true, tokens are transferred and ccipReceive is called atomically. Additionally, if the receiver address does not have code associated with it at the time of execution (EXTCODESIZE returns 0), only tokens will be transferred.",
					"params": {
						"interfaceId": "The interfaceId to check."
					},
					"returns": {
						"_0": "true if the interfaceId is supported."
					}
				}
			},
			"title": "- A simple receiver contract for receiving usdc tokens then calling a staking contract.",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"acceptOwnership()": {
					"notice": "Allows an ownership transfer to be completed by the recipient."
				},
				"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))": {
					"notice": "The entrypoint for the CCIP router to call. This function should never revert, all errors should be handled internally in this contract."
				},
				"constructor": {
					"notice": "Constructor initializes the contract with the router address."
				},
				"deleteSenderForSourceChain(uint64)": {
					"notice": "This function can only be called by the owner."
				},
				"getFailedMessages(uint256,uint256)": {
					"notice": "Retrieves a paginated list of failed messages."
				},
				"getRouter()": {
					"notice": "Return the current router"
				},
				"owner()": {
					"notice": "Get the current owner"
				},
				"processMessage((bytes32,uint64,bytes,bytes,(address,uint256)[]))": {
					"notice": "Serves as the entry point for this contract to process incoming messages."
				},
				"retryFailedMessage(bytes32,address)": {
					"notice": "Allows the owner to retry a failed message in order to unblock the associated tokens."
				},
				"setSenderForSourceChain(uint64,address)": {
					"notice": "This function can only be called by the owner."
				},
				"supportsInterface(bytes4)": {
					"notice": "IERC165 supports an interfaceId."
				},
				"transferOwnership(address)": {
					"notice": "Allows an owner to begin transferring ownership to a new address."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"CCIPreceiverBASE.sol": "CCIPreceiverBASE"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@chainlink/contracts-ccip@1.6.0/contracts/applications/CCIPReceiver.sol": {
			"keccak256": "0xc7083e9887e0f2a754de693fa5913fbbceefdcc4c20465d4eb55fc311123461a",
			"license": "MIT",
			"urls": [
				"bzz-raw://9715be6ebe80643d77a0497f7e5702d525419065ccd66e8bdd4ce32d527909de",
				"dweb:/ipfs/QmQqnjPbpU35454Gc5zwrdFDegwSyo9kjjUfxWWPRj2Vcc"
			]
		},
		"@chainlink/contracts-ccip@1.6.0/contracts/interfaces/IAny2EVMMessageReceiver.sol": {
			"keccak256": "0x8f67554db88baee2d8facee3320fb85fd566f843b9e4bdb6870eafe1637d7919",
			"license": "MIT",
			"urls": [
				"bzz-raw://4fb75a68a7a53c0d2d444f996b60b77f329c6e25e96d695f6b6219eb92baebc5",
				"dweb:/ipfs/QmWCaGFSHSx17TgDou3EX2yuofPQnmkiuGX3isUmfHe3mb"
			]
		},
		"@chainlink/contracts-ccip@1.6.0/contracts/libraries/Client.sol": {
			"keccak256": "0x7c736e12ebb1d0e3a0c99436eacfac14d16ec941843050c9a7d82a6bff5b35a1",
			"license": "MIT",
			"urls": [
				"bzz-raw://7cf3e0bbece35e0d1936225535b5ea91e63e45ad363d61fbec8423a53e96f6e5",
				"dweb:/ipfs/QmTMtUJcUGuMmLVMJ6PVTAWNatf9R77Cq6mzdDtFMUVB6h"
			]
		},
		"@chainlink/contracts/src/v0.8/vendor/openzeppelin-solidity/v5.0.2/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b",
			"license": "MIT",
			"urls": [
				"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df",
				"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL"
			]
		},
		"@chainlink/contracts@1.4.0/src/v0.8/shared/access/ConfirmedOwner.sol": {
			"keccak256": "0xdcb0e9135ddbe71ee27ba99fa06656960c66c964cf2ecb29696da1c1427d9861",
			"license": "MIT",
			"urls": [
				"bzz-raw://f914a1b638300e82d8f5a020a4195235599afebab4ef1e10c6992f3c90e7df3e",
				"dweb:/ipfs/Qmf2MbuVB16qbCGii3U5cjcBvVjAHHYzKp9voJa2eDch9B"
			]
		},
		"@chainlink/contracts@1.4.0/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol": {
			"keccak256": "0x2422a055657a87e98be61f8f31abb1824ec50fd0f73949f4e3c6ac877efb6da8",
			"license": "MIT",
			"urls": [
				"bzz-raw://fde3b9ac3a4c42ea43e2f92b037d32ab20e30818471c6e20d2590147a6c2958a",
				"dweb:/ipfs/QmQ2ohQP4GnhPUsiWCvCfb1dsoGYDdxSap3dxtnYTV4rmT"
			]
		},
		"@chainlink/contracts@1.4.0/src/v0.8/shared/access/OwnerIsCreator.sol": {
			"keccak256": "0x895af02d6a3df2930bbb6ec1f2d68118b492ca6e710ba0c34fcb6b574a0906aa",
			"license": "MIT",
			"urls": [
				"bzz-raw://c4c69fab5eea1c0448f856a51d7e5736454fe5cc083d36c60bf3ee23bb3d0e8e",
				"dweb:/ipfs/QmP4fYQ9k7xeZms6cwnqnQuuAkRkeE2TWewyvCD8Mrc2DZ"
			]
		},
		"@chainlink/contracts@1.4.0/src/v0.8/shared/interfaces/IOwnable.sol": {
			"keccak256": "0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767",
			"license": "MIT",
			"urls": [
				"bzz-raw://17c636625a5d29a140612db496d2cca9fb4b48c673adb0fd7b3957d287e75921",
				"dweb:/ipfs/QmNoBX8TY424bdQWyQC7y3kpKfgxyWxhLw7KEhhEEoBN9q"
			]
		},
		"@chainlink/contracts@1.4.0/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0x527e858729af8197f6c8f99554d32bfc4f5a72b15975489c94809363d7ae522f",
			"license": "MIT",
			"urls": [
				"bzz-raw://6828dfa867eaff18f383aad4ca4b5aaedb93109023d74aaf418fee6c06e556c2",
				"dweb:/ipfs/QmXSQ9WnaJ6Ba9gvKvgNxDY7sa7ATJ9V55uwGSGCpBuJKu"
			]
		},
		"@chainlink/contracts@1.4.0/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
			"keccak256": "0x28d267ba89cbaca4a86577add59f1a18842ca6e7d80a05f3dbf52127928a5e2c",
			"license": "MIT",
			"urls": [
				"bzz-raw://67a26777e88ae78952713f4479ca3126db804dc9ce1a85f079ec067393a6275d",
				"dweb:/ipfs/QmNLxBkkA6os8W9vUeCsjcFsMkGhtqAZrGjPuoACTqVhbh"
			]
		},
		"@chainlink/contracts@1.4.0/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/utils/SafeERC20.sol": {
			"keccak256": "0x19d64e8f5fa895ab2625917111fd9f316d4f9314239f0712fd6dc2f5bff9d0c9",
			"license": "MIT",
			"urls": [
				"bzz-raw://14de158ff9e64ebeac381bba59fe3500b48853063cfb27343090a3f710795fee",
				"dweb:/ipfs/QmQJE5SfDfgy8aKENnsjW4t9P4bmTSnujotFmnXnrwpfzQ"
			]
		},
		"@chainlink/contracts@1.4.0/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/utils/Address.sol": {
			"keccak256": "0x172a09a55d730f20a9bb309086a4ad06b17c612151f58bab2b44efe78d583d4e",
			"license": "MIT",
			"urls": [
				"bzz-raw://1f812456ddd112f09606bfc5965c6e643558d740264273017ad556122502b4e2",
				"dweb:/ipfs/QmdWE4wncanz9Lhu5ESgSo14jAR74Ss5puCM5zUGonATLw"
			]
		},
		"@chainlink/contracts@1.4.0/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/utils/structs/EnumerableMap.sol": {
			"keccak256": "0x71f91e7829f04d6f5a39dd10258cc648427b2b542313622f782d39149d5e750d",
			"license": "MIT",
			"urls": [
				"bzz-raw://c1d8787acaade1b44fc1d2014e84bfb9349988db1e5758bd8b7d967955da31d6",
				"dweb:/ipfs/QmUuU87hYgFA1LxbSaGhMeDnKodbKisxuP6sY8eEoboZL9"
			]
		},
		"@chainlink/contracts@1.4.0/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/utils/structs/EnumerableSet.sol": {
			"keccak256": "0x9ec0d82ee53d4137be44f1f38f9a82d0d3a2027b3b8b226a5a90e4ee76e926d6",
			"license": "MIT",
			"urls": [
				"bzz-raw://f783b453420dee16bb4f0839e3d2485d753d2dcd317adbeecb7e510c39563f57",
				"dweb:/ipfs/QmUd4BeCaw6ZujaYvvMrCn2BNqmiP4bt4eA9rxiXY5od5E"
			]
		},
		"CCIPreceiverBASE.sol": {
			"keccak256": "0x8be2966d2805a4fab5aefbd1b93908ed8b2f87b603c2f25bc08f7f6e7576f0ac",
			"license": "MIT",
			"urls": [
				"bzz-raw://33b352b40fb1eeec516767c585f86f7dfbd17e33e0477c3df9d31a042edc998e",
				"dweb:/ipfs/QmfU2RBvATPhQZYuctEBKr2WxSA5hSA1dzN9z28qri7Whe"
			]
		}
	},
	"version": 1
}